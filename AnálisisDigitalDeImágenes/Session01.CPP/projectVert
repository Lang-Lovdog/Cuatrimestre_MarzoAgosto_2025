let SessionLoad = 1
let s:so_save = &g:so | let s:siso_save = &g:siso | setg so=0 siso=0 | setl so=-1 siso=-1
let v:this_session=expand("<sfile>:p")
silent only
silent tabonly
cd ~/Documents/ACAD/MAESTRÍA/Cuatrimestre_MarzoAgosto_2025/AnálisisDigitalDeImágenes/Session01.CPP
if expand('%') == '' && !&modified && line('$') <= 1 && getline(1) == ''
  let s:wipebuf = bufnr('%')
endif
let s:shortmess_save = &shortmess
if &shortmess =~ 'A'
  set shortmess=aoOA
else
  set shortmess=aoO
endif
badd +1 OCV_Course.hxx
badd +163 OCV_Course.cxx
badd +9 Makefile
badd +1 OCV_Course.cpp
badd +0 oil:///C/Users/Lang\ Lovdog/Documents/ACAD/MAESTRÍA/Cuatrimestre_MarzoAgosto_2025/AnálisisDigitalDeImágenes/Session01.CPP/
argglobal
%argdel
$argadd oil:///C/Users/Lang\ Lovdog/Documents/ACAD/MAESTRÍA/Cuatrimestre_MarzoAgosto_2025/AnálisisDigitalDeImágenes/Session01.CPP/
edit OCV_Course.cpp
let s:save_splitbelow = &splitbelow
let s:save_splitright = &splitright
set splitbelow splitright
wincmd _ | wincmd |
split
wincmd _ | wincmd |
split
2wincmd k
wincmd w
wincmd w
let &splitbelow = s:save_splitbelow
let &splitright = s:save_splitright
wincmd t
let s:save_winminheight = &winminheight
let s:save_winminwidth = &winminwidth
set winminheight=0
set winheight=1
set winminwidth=0
set winwidth=1
exe '1resize ' . ((&lines * 13 + 54) / 109)
exe '2resize ' . ((&lines * 78 + 54) / 109)
exe '3resize ' . ((&lines * 13 + 54) / 109)
argglobal
balt OCV_Course.cxx
setlocal foldmethod=expr
setlocal foldexpr=nvim_treesitter#foldexpr()
setlocal foldmarker={{{,}}}
setlocal foldignore=#
setlocal foldlevel=0
setlocal foldminlines=1
setlocal foldnestmax=20
setlocal foldenable
let s:l = 12 - ((11 * winheight(0) + 6) / 13)
if s:l < 1 | let s:l = 1 | endif
keepjumps exe s:l
normal! zt
keepjumps 12
normal! 0
wincmd w
argglobal
if bufexists(fnamemodify("OCV_Course.cxx", ":p")) | buffer OCV_Course.cxx | else | edit OCV_Course.cxx | endif
if &buftype ==# 'terminal'
  silent file OCV_Course.cxx
endif
balt OCV_Course.cpp
setlocal foldmethod=expr
setlocal foldexpr=nvim_treesitter#foldexpr()
setlocal foldmarker={{{,}}}
setlocal foldignore=#
setlocal foldlevel=0
setlocal foldminlines=1
setlocal foldnestmax=20
setlocal foldenable
121
sil! normal! zo
129
sil! normal! zo
130
sil! normal! zo
121
sil! normal! zc
139
sil! normal! zo
173
sil! normal! zo
178
sil! normal! zo
179
sil! normal! zo
182
sil! normal! zo
185
sil! normal! zo
let s:l = 191 - ((190 * winheight(0) + 39) / 78)
if s:l < 1 | let s:l = 1 | endif
keepjumps exe s:l
normal! zt
keepjumps 191
normal! 0
wincmd w
argglobal
if bufexists(fnamemodify("OCV_Course.hxx", ":p")) | buffer OCV_Course.hxx | else | edit OCV_Course.hxx | endif
if &buftype ==# 'terminal'
  silent file OCV_Course.hxx
endif
balt OCV_Course.cxx
setlocal foldmethod=expr
setlocal foldexpr=nvim_treesitter#foldexpr()
setlocal foldmarker={{{,}}}
setlocal foldignore=#
setlocal foldlevel=0
setlocal foldminlines=1
setlocal foldnestmax=20
setlocal foldenable
1
sil! normal! zo
let s:l = 7 - ((6 * winheight(0) + 6) / 13)
if s:l < 1 | let s:l = 1 | endif
keepjumps exe s:l
normal! zt
keepjumps 7
normal! 02|
wincmd w
2wincmd w
exe '1resize ' . ((&lines * 13 + 54) / 109)
exe '2resize ' . ((&lines * 78 + 54) / 109)
exe '3resize ' . ((&lines * 13 + 54) / 109)
tabnext 1
if exists('s:wipebuf') && len(win_findbuf(s:wipebuf)) == 0 && getbufvar(s:wipebuf, '&buftype') isnot# 'terminal'
  silent exe 'bwipe ' . s:wipebuf
endif
unlet! s:wipebuf
set winheight=1 winwidth=20
let &shortmess = s:shortmess_save
let &winminheight = s:save_winminheight
let &winminwidth = s:save_winminwidth
let s:sx = expand("<sfile>:p:r")."x.vim"
if filereadable(s:sx)
  exe "source " . fnameescape(s:sx)
endif
let &g:so = s:so_save | let &g:siso = s:siso_save
set hlsearch
doautoall SessionLoadPost
unlet SessionLoad
" vim: set ft=vim :
